<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Trabajo Practico 4 Coloquio</title>
  <style>
    /* Ocultar el título y la tabla inicialmente */
    #requestsTitle, #data-table {
      display: none;
    }
  </style>
</head>
<body>
  <h1>Trabajo Practico 4 Coloquio</h1>

  <button onclick="window.location.href='/logout'">Logout</button>
  
  <div>
    <label for="spreadsheetId">ID Sheet</label>
    <input type="text" id="spreadsheetId" name="spreadsheetId" required />
    <button type="button" id="loadButton">Load</button>
  </div>

  <form id="promptForm">
    <div>
      <label for="request">Prompt</label>
      <textarea name="request" id="request" cols="30" rows="10" required></textarea>
    </div>
    <div>
      <label for="range">Elige la Hoja:</label>
      <select name="range" id="range" required>
        <!-- Las opciones se llenarán dinámicamente -->
      </select>
    </div>
    <button type="submit">Submit</button>
  </form>

  <h2 id="requestsTitle"><%= fileName %></h2>

  <table id="data-table">
    <thead>
      <tr>
        <% if (sheetData.length > 0) { %>
          <% for (const header of sheetData[0]) { %>
            <th><%= header %></th>
          <% } %>
        <% } %>
      </tr>
    </thead>
    <tbody>
      <% for (let i = 1; i < sheetData.length; i++) { %>
        <tr>
          <% for (const cell of sheetData[i]) { %>
            <td><%= cell %></td>
          <% } %>
        </tr>
      <% } %>
    </tbody>
  </table>

  <script>
    let newSheetData = []; // Definir `newSheetData` fuera de las funciones para que esté accesible globalmente

    document.getElementById('loadButton').addEventListener('click', async () => {
      const spreadsheetId = document.getElementById('spreadsheetId').value;

      if (!spreadsheetId) {
        alert('ID de Sheet Invalido.');
        return;
      }

      // Solicitar datos de la hoja, incluyendo nombres de las hojas
      const response = await fetch(`/cargar-sheet?spreadsheetId=${spreadsheetId}`);
      if (!response.ok) {
        alert('Error al cargar los datos.');
        return;
      }

      const { sheetData, fileName, sheetNames } = await response.json();

      // Actualizar el combo box con los nuevos nombres de hojas
      const rangeSelect = document.getElementById('range');
      rangeSelect.innerHTML = ''; // Limpiar opciones existentes

      sheetNames.forEach(sheetName => {
        const option = document.createElement('option');
        option.value = sheetName;
        option.textContent = sheetName;
        rangeSelect.appendChild(option);
      });

      // Seleccionar el primer rango si está vacío
      if (!rangeSelect.value && sheetNames.length > 0) {
        rangeSelect.value = sheetNames[0];
      }

      // Cargar los datos de la hoja seleccionada
      const selectedRange = rangeSelect.value;
      await loadSheetData(spreadsheetId, selectedRange); // Cargar datos iniciales
    });

    document.getElementById("range").addEventListener("change", async (event) => {
      const spreadsheetId = document.getElementById('spreadsheetId').value;
      const selectedRange = event.target.value;

      if (!spreadsheetId) {
        alert('ID de Sheet Invalido.');
        return;
      }

      await loadSheetData(spreadsheetId, selectedRange); // Cargar datos de la hoja seleccionada
    });

    async function loadSheetData(spreadsheetId, range) {
      const dataResponse = await fetch(`/cargar-sheet?spreadsheetId=${spreadsheetId}&range=${range}`);
      if (!dataResponse.ok) {
        alert('Error al cargar los datos de la hoja.');
        return;
      }

      const { sheetData: updatedSheetData, fileName: updatedFileName } = await dataResponse.json();
      newSheetData = updatedSheetData; // Actualizar newSheetData

      // Actualizar la tabla
      const tbody = document.querySelector('#data-table tbody');
      tbody.innerHTML = ''; // Limpiar la tabla existente 

      if (newSheetData.length > 0) {
        const thead = document.querySelector('#data-table thead tr');
        thead.innerHTML = ''; // Limpiar encabezados

        newSheetData[0].forEach(header => {
          const th = document.createElement('th');
          th.textContent = header;
          thead.appendChild(th);
        });

        // Agregar los nuevos datos
        newSheetData.slice(1).forEach(row => {
          const tr = document.createElement('tr');
          row.forEach(cell => {
            const td = document.createElement('td');
            td.textContent = cell;
            tr.appendChild(td);
          });
          tbody.appendChild(tr);
        });
      }

      document.getElementById('requestsTitle').textContent = `${updatedFileName}`;
      document.getElementById('requestsTitle').style.display = 'block';
      document.getElementById('data-table').style.display = 'table';
    }

    document.getElementById("promptForm").addEventListener("submit", async (e) => {
      e.preventDefault();

      const promptText = document.getElementById("request").value;
      const spreadsheetId = document.getElementById('spreadsheetId').value;
      const selectedRange = document.getElementById("range").value;

      // Convertir `newSheetData` a cadena JSON e incluirlo en el prompt
      const sheetDataText = JSON.stringify(newSheetData);
      const combinedPrompt = `${promptText}\n\n Usando el siguiente dataset:\n${sheetDataText} 
      Genera un dataset EN TEXTO usando [[]], respetá la primera fila, no expliques nada más, solo quiero el array en texto.
      ` + " sin utilizar ```\n";

      // Enviar el prompt combinado al backend
      const response = await fetch("/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ prompt: combinedPrompt, spreadsheetId, range: selectedRange }), // Enviar el prompt combinado
      });

      const data = await response.json();
      
      alert("Generated text: " + data.text); // Muestra el resultado
    });
  </script>
</body>
</html>
